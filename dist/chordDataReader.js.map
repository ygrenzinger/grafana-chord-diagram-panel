{"version":3,"sources":["../src/chordDataReader.js"],"names":["chordRdr","matrix","mmap","d","i","j","s","t","g","m","source","index","target","_","filter","id","sname","name","sdata","value","svalue","stotal","reduce","k","n","tname","tdata","tvalue","ttotal","gname","gdata","data","gvalue","mtotal","m1","n1","m2","n2"],"mappings":";;;;;;;AAEe,WAASA,QAAT,CAAmBC,MAAnB,EAA2BC,IAA3B,EAAiC;AAC9C,WAAO,UAAUC,CAAV,EAAa;AAClB,UAAIC,CAAJ;AAAA,UAAMC,CAAN;AAAA,UAAQC,CAAR;AAAA,UAAUC,CAAV;AAAA,UAAYC,CAAZ;AAAA,UAAcC,IAAI,EAAlB;AACA,UAAIN,EAAEO,MAAN,EAAc;AACZN,YAAID,EAAEO,MAAF,CAASC,KAAb,CAAoBN,IAAIF,EAAES,MAAF,CAASD,KAAb;AACpBL,YAAIO,EAAEC,MAAF,CAASZ,IAAT,EAAe,EAACa,IAAIX,CAAL,EAAf,CAAJ;AACAG,YAAIM,EAAEC,MAAF,CAASZ,IAAT,EAAe,EAACa,IAAIV,CAAL,EAAf,CAAJ;AACAI,UAAEO,KAAF,GAAUV,EAAE,CAAF,EAAKW,IAAf;AACAR,UAAES,KAAF,GAAUf,EAAEO,MAAF,CAASS,KAAnB;AACAV,UAAEW,MAAF,GAAW,CAACjB,EAAEO,MAAF,CAASS,KAArB;AACAV,UAAEY,MAAF,GAAWR,EAAES,MAAF,CAASrB,OAAOG,CAAP,CAAT,EAAoB,UAAUmB,CAAV,EAAaC,CAAb,EAAgB;AAAE,iBAAOD,IAAIC,CAAX;AAAe,SAArD,EAAuD,CAAvD,CAAX;AACAf,UAAEgB,KAAF,GAAUlB,EAAE,CAAF,EAAKU,IAAf;AACAR,UAAEiB,KAAF,GAAUvB,EAAES,MAAF,CAASO,KAAnB;AACAV,UAAEkB,MAAF,GAAW,CAACxB,EAAES,MAAF,CAASO,KAArB;AACAV,UAAEmB,MAAF,GAAWf,EAAES,MAAF,CAASrB,OAAOI,CAAP,CAAT,EAAoB,UAAUkB,CAAV,EAAaC,CAAb,EAAgB;AAAE,iBAAOD,IAAIC,CAAX;AAAe,SAArD,EAAuD,CAAvD,CAAX;AACD,OAZD,MAYO;AACLhB,YAAIK,EAAEC,MAAF,CAASZ,IAAT,EAAe,EAACa,IAAIZ,EAAEQ,KAAP,EAAf,CAAJ;AACAF,UAAEoB,KAAF,GAAUrB,EAAE,CAAF,EAAKS,IAAf;AACAR,UAAEqB,KAAF,GAAUtB,EAAE,CAAF,EAAKuB,IAAf;AACAtB,UAAEuB,MAAF,GAAW7B,EAAEgB,KAAb;AACD;AACDV,QAAEwB,MAAF,GAAWpB,EAAES,MAAF,CAASrB,MAAT,EAAiB,UAAUiC,EAAV,EAAcC,EAAd,EAAkB;AAC5C,eAAOD,KAAKrB,EAAES,MAAF,CAASa,EAAT,EAAa,UAAUC,EAAV,EAAcC,EAAd,EAAkB;AAAE,iBAAOD,KAAKC,EAAZ;AAAiB,SAAlD,EAAoD,CAApD,CAAZ;AACD,OAFU,EAER,CAFQ,CAAX;AAGA,aAAO5B,CAAP;AACD,KAxBD;AAyBD;;qBA1BuBT,Q;;;;AAFjBa,O","file":"chordDataReader.js","sourcesContent":["import _ from 'lodash';\n\nexport default function chordRdr (matrix, mmap) {\n  return function (d) {\n    var i,j,s,t,g,m = {};\n    if (d.source) {\n      i = d.source.index; j = d.target.index;\n      s = _.filter(mmap, {id: i });\n      t = _.filter(mmap, {id: j });\n      m.sname = s[0].name;\n      m.sdata = d.source.value;\n      m.svalue = +d.source.value;\n      m.stotal = _.reduce(matrix[i], function (k, n) { return k + n; }, 0);\n      m.tname = t[0].name;\n      m.tdata = d.target.value;\n      m.tvalue = +d.target.value;\n      m.ttotal = _.reduce(matrix[j], function (k, n) { return k + n; }, 0);\n    } else {\n      g = _.filter(mmap, {id: d.index });\n      m.gname = g[0].name;\n      m.gdata = g[0].data;\n      m.gvalue = d.value;\n    }\n    m.mtotal = _.reduce(matrix, function (m1, n1) { \n      return m1 + _.reduce(n1, function (m2, n2) { return m2 + n2; }, 0);\n    }, 0);\n    return m;\n  };\n}\n"]}