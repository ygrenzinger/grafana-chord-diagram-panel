{"version":3,"sources":["../src/ctrl.js"],"names":["MetricsPanelCtrl","_","$","kbn","config","TimeSeries","d3","renderChordDiagram","panelDefaults","fontSizes","fontTypes","unitFormats","getUnitFormats","operatorNameOptions","valueMaps","value","op","text","mappingTypes","name","rangeMaps","from","to","mappingType","thresholds","colors","decimals","format","operatorName","gauge","minValue","maxValue","tickSpaceMinVal","tickSpaceMajVal","gaugeUnits","gaugeRadius","pivotRadius","padding","edgeWidth","tickEdgeGap","tickLengthMaj","tickLengthMin","needleTickGap","needleLengthNeg","ticknessGaugeBasis","needleWidth","tickWidthMaj","tickWidthMin","unitsLabelFontSize","labelFontSize","zeroTickAngle","maxTickAngle","zeroNeedleAngle","maxNeedleAngle","outerEdgeCol","innerCol","pivotCol","needleCol","unitsLabelCol","tickLabelCol","tickColMaj","tickColMin","tickFont","unitsFont","showThresholdOnGauge","showThresholdColorOnValue","showLowerThresholdRange","showMiddleThresholdRange","showUpperThresholdRange","animateNeedleValueTransition","D3ChordDiagramPanelCtrl","$scope","$injector","alertSrv","defaults","panel","chordDiagramDivId","id","scoperef","alertSrvRef","initialized","panelContainer","svg","panelWidth","panelHeight","gaugeObject","data","valueFormatted","valueRounded","series","events","on","onInitEditMode","bind","onRender","panels","grafanaBootData","settings","thisPanel","pluginId","thisPanelPath","baseUrl","optionsPath","addEditorTab","container","width","clientWidth","getPanelHeight","height","ctrl","row","parseInt","replace","length","remove","setValues","clearSVG","getPanelWidth","map","console","log","JSON","stringify","rangeMap","push","scope","elem","attrs","setContainer","find","renderedSVG","render","flotpairs","error","Error","message","lastPoint","last","datapoints","lastValue","isArray","alias","isString","escape","stats","decimalInfo","getDecimalsForValue","formatFunc","valueFormats","scaledDecimals","roundValue","scopedVars","__name","label","i","parseFloat","j","subItem","err","onDataReceived","dataList","seriesHandler","seriesData","target","getFlotPairs","nullPointMode","templateUrl"],"mappings":"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","file":"ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\n//import * as d3 from '../bower_components/d3/d3.js';\nimport * as d3 from './external/d3.v3.min';\nimport './css/panel.css!';\nimport './external/d3gauge';\nimport './external/d3-queue.min';\nimport renderChordDiagram from './d3_chorddiagram';\n\nconst panelDefaults = {\n  fontSizes: [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70],\n  fontTypes: [\n    'Arial', 'Avant Garde', 'Bookman',\n    'Consolas', 'Courier', 'Courier New',\n    'Garamond', 'Helvetica', 'Open Sans',\n    'Palatino', 'Times', 'Times New Roman',\n    'Verdana'\n  ],\n  unitFormats: kbn.getUnitFormats(),\n  operatorNameOptions: ['min','max','avg', 'current', 'total', 'name'],\n  valueMaps: [\n    { value: 'null', op: '=', text: 'N/A' }\n  ],\n  mappingTypes: [\n    {name: 'value to text', value: 1},\n    {name: 'range to text', value: 2},\n  ],\n  rangeMaps: [\n    { from: 'null', to: 'null', text: 'N/A' }\n  ],\n  mappingType: 1,\n  thresholds: '',\n  colors: [\"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\"],\n  decimals: 2, // decimal precision\n  format: 'none', // unit format\n  operatorName: 'avg', // operator applied to time series\n  gauge: {\n    minValue: 0,\n    maxValue: 100,\n    tickSpaceMinVal: 1,\n    tickSpaceMajVal: 10,\n    gaugeUnits: '', // no units by default, this will be selected by user\n    gaugeRadius: 0, // 0 for auto-scale\n    pivotRadius: 0.1,\n    padding: 0.05,\n    edgeWidth: 0.05,\n    tickEdgeGap: 0.05,\n    tickLengthMaj: 0.15,\n    tickLengthMin: 0.05,\n    needleTickGap: 0.05,\n    needleLengthNeg: 0.2,\n    ticknessGaugeBasis: 200,\n    needleWidth: 5,\n    tickWidthMaj: 5,\n    tickWidthMin: 1,\n    unitsLabelFontSize: 22,\n    labelFontSize: 18,\n    zeroTickAngle: 60,\n    maxTickAngle: 300,\n    zeroNeedleAngle: 40,\n    maxNeedleAngle: 320,\n    outerEdgeCol:  '#0099CC',\n    innerCol:      '#fff',\n    pivotCol:      '#999',\n    needleCol:     '#0099CC',\n    unitsLabelCol: '#000',\n    tickLabelCol:  '#000',\n    tickColMaj:    '#0099CC',\n    tickColMin:    '#000',\n    tickFont: 'Open Sans',\n    unitsFont: 'Open Sans',\n    showThresholdOnGauge: false,\n    showThresholdColorOnValue: false,\n    showLowerThresholdRange: false,\n    showMiddleThresholdRange: true,\n    showUpperThresholdRange: true,\n    animateNeedleValueTransition: true,\n  },\n};\n\nclass D3ChordDiagramPanelCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, alertSrv) {\n    super($scope, $injector);\n    // merge existing settings with our defaults\n    _.defaults(this.panel, panelDefaults);\n    this.panel.chordDiagramDivId = '#d3_chord_diagram_svg_' + this.panel.id;\n    this.scoperef = $scope;\n    this.alertSrvRef = alertSrv;\n    this.initialized = false;\n    this.panelContainer = null;\n    this.svg = null;\n    this.panelWidth = null;\n    this.panelHeight = null;\n    this.gaugeObject = null;\n    this.data = {\n      value: 0,\n      valueFormatted: 0,\n      valueRounded: 0\n    };\n    this.series = [];\n    //console.log(\"D3GaugePanelCtrl constructor!\");\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n    //this.events.on('data-received', this.onDataReceived.bind(this));\n    //this.events.on('data-error', this.onDataError.bind(this));\n    //this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    //console.log(\"D3GaugePanelCtrl constructor done!\");\n  }\n\n  onInitEditMode() {\n    // determine the path to this plugin\n    var panels = grafanaBootData.settings.panels;\n    var thisPanel = panels[this.pluginId];\n    var thisPanelPath = thisPanel.baseUrl + '/';\n    // add the relative path to the partial\n    var optionsPath = thisPanelPath + 'partials/editor.options.html';\n    this.addEditorTab('Options', optionsPath, 2);\n  }\n\n  setContainer(container) {\n    this.panelContainer = container;\n  }\n\n  getPanelWidth() {\n    var width = this.panelContainer[0].clientWidth;\n    if (width === 0) {\n      width = this.getPanelHeight();\n      width -= 24;\n      if (width < 900) {\n        width = 900;\n      }\n    }\n    return width;\n  }\n\n  getPanelHeight() {\n    // panel can have a fixed height via options\n    var height = this.$scope.ctrl.panel.height;\n    if (typeof height === 'undefined') {\n      // if that is blank, try to get it from our row\n      height = this.row.height;\n      if (typeof height === 'undefined') {\n        height = 900;\n      } else {\n        // convert to numeric value\n        height = parseInt(height.replace(\"px\",\"\"));\n      }\n    }\n    if (height < 900) {\n      height = 900;\n    }\n    return height;\n  }\n\n  clearSVG() {\n    if ($(this.panel.chordDiagramDivId).length) {\n      //console.log(\"Clearing SVG\");\n      $(this.panel.chordDiagramDivId).remove();\n    }\n  }\n\n  onRender() {\n    // update the values to be sent to the gauge constructor\n    this.setValues(this.data);\n    //console.log(\"Render D3\");\n    this.clearSVG();\n\n    this.panelWidth = this.getPanelWidth();\n    this.panelHeight = this.getPanelHeight();\n\n    this.svg = renderChordDiagram(this.panelContainer[0], this.panel.chordDiagramDivId, this.panelWidth, this.panelHeight);\n    \n  }\n\n  removeValueMap(map) {\n    console.log(\"removeValueMap: \" + JSON.stringify(map));\n    /*\n    var index = _.indexOf(this.panel.valueMaps, map);\n    this.panel.valueMaps.splice(index, 1);\n    this.render();\n    */\n  }\n\n  addValueMap() {\n    console.log(\"addValueMap\");\n    /*\n    this.panel.valueMaps.push({value: '', op: '=', text: '' });\n    */\n  }\n\n  removeRangeMap(rangeMap) {\n    console.log(\"removeRangeMap: \" + JSON.stringify(rangeMap));\n    /*\n    var index = _.indexOf(this.panel.rangeMaps, rangeMap);\n    this.panel.rangeMaps.splice(index, 1);\n    this.render();\n    */\n  }\n\n  addRangeMap() {\n    console.log(\"addRangeMap\");\n    this.panel.rangeMaps.push({from: '', to: '', text: ''});\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    //console.log(\"d3gauge inside link\");\n    ctrl.setContainer(elem.find('.grafana-d3-chord-diagram'));\n    // Check if there is a diagram rendered\n    var renderedSVG = $(this.panel.chordDiagramDivId);\n    // console.log(\"link: found svg length \" + renderedSVG.length);\n    if (renderedSVG.length === 0) {\n      // no diagram found, force a render\n      this.render();\n    }\n  }\n\n\n  getDecimalsForValue(value) {\n    console.log(\"getDecimalsForValue: \" + value);\n\n    /*\n    if (_.isNumber(this.panel.decimals)) {\n      return {decimals: this.panel.decimals, scaledDecimals: null};\n    }\n\n    var delta = value / 2;\n    var dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n    var magn = Math.pow(10, -dec),\n        norm = delta / magn, // norm is between 1.0 and 10.0\n        size;\n\n    if (norm < 1.5) {\n      size = 1;\n    } else if (norm < 3) {\n      size = 2;\n      // special case for 2.5, requires an extra decimal\n      if (norm > 2.25) {\n        size = 2.5;\n        ++dec;\n      }\n    } else if (norm < 7.5) {\n      size = 5;\n    } else {\n      size = 10;\n    }\n\n    size *= magn;\n\n    // reduce starting decimals if not needed\n    if (Math.floor(value) === value) { dec = 0; }\n\n    var result = {};\n    result.decimals = Math.max(0, dec);\n    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n    return result;\n    */\n\n    return {};\n  }\n\n  setValues(data) {\n    data.flotpairs = [];\n    if (this.series.length > 1) {\n      var error = new Error();\n      error.message = 'Multiple Series Error';\n      error.data = 'Metric query returns ' + this.series.length +\n        ' series. Single Stat Panel expects a single series.\\n\\nResponse:\\n'+JSON.stringify(this.series);\n      throw error;\n    }\n\n    if (this.series && this.series.length > 0) {\n      var lastPoint = _.last(this.series[0].datapoints);\n      var lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n      if (this.panel.operatorName === 'name') {\n        data.value = 0;\n        data.valueRounded = 0;\n        data.valueFormatted = this.series[0].alias;\n      } else if (_.isString(lastValue)) {\n        data.value = 0;\n        data.valueFormatted = _.escape(lastValue);\n        data.valueRounded = 0;\n      } else {\n        data.value = this.series[0].stats[this.panel.operatorName];\n        data.flotpairs = this.series[0].flotpairs;\n        var decimalInfo = this.getDecimalsForValue(data.value);\n        var formatFunc = kbn.valueFormats[this.panel.format];\n        data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n        data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\n      }\n\n      // Add $__name variable for using in prefix or postfix\n      data.scopedVars = {\n        __name: {\n          value: this.series[0].label\n        }\n      };\n    }\n\n    // check value to text mappings if its enabled\n    if (this.panel.mappingType === 1) {\n      for (var i = 0; i < this.panel.valueMaps.length; i++) {\n        var map = this.panel.valueMaps[i];\n        // special null case\n        if (map.value === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to text mapping\n        var value = parseFloat(map.value);\n        if (value === data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    } else if (this.panel.mappingType === 2) {\n      for (var j = 0; j < this.panel.rangeMaps.length; j++) {\n        var rangeMap = this.panel.rangeMaps[j];\n        // special null case\n        if (rangeMap.from === 'null' && rangeMap.to === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = rangeMap.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to range mapping\n        var from = parseFloat(rangeMap.from);\n        var to = parseFloat(rangeMap.to);\n        if (to >= data.valueRounded && from <= data.valueRounded) {\n          data.valueFormatted = rangeMap.text;\n          return;\n        }\n      }\n    }\n\n    if (data.value === null || data.value === void 0) {\n      data.valueFormatted = \"no value\";\n    }\n  }\n  \n\n  setUnitFormat(subItem) {\n    console.log('setUnitFormat: ' + JSON.stringify(subItem));\n    /*\n    this.panel.format = subItem.value;\n    this.render();\n    */\n  }\n\n  onDataError(err) {\n    this.onDataReceived([]);\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    var data = {};\n    this.setValues(data);\n    this.data = data;\n    //should update Chord Diagram\n  }\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n}\n\nD3ChordDiagramPanelCtrl.templateUrl = 'partials/template.html';\nexport {\n\tD3ChordDiagramPanelCtrl,\n\tD3ChordDiagramPanelCtrl as MetricsPanelCtrl\n};\n"]}