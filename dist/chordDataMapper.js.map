{"version":3,"sources":["../src/chordDataMapper.js"],"names":["chordMpr","data","mpr","mmap","n","matrix","filter","accessor","setFilter","fun","setAccessor","getMatrix","_","each","a","id","b","recs","row","getMap","printMatrix","elem","console","log","addToMap","value","info","name","addValuesToMap","varName","values","uniq","map","v"],"mappings":";;;;;;;AAEe,WAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACrC,QAAIC,MAAM,EAAV;AAAA,QAAcC,OAAO,EAArB;AAAA,QAAyBC,IAAI,CAA7B;AAAA,QAAgCC,SAAS,EAAzC;AAAA,QAA6CC,MAA7C;AAAA,QAAqDC,QAArD;;AAEAL,QAAIM,SAAJ,GAAgB,UAAUC,GAAV,EAAe;AAC7BH,eAASG,GAAT;AACA,aAAO,IAAP;AACD,KAHD;AAIEP,QAAIQ,WAAJ,GAAkB,UAAUD,GAAV,EAAe;AAC/BF,iBAAWE,GAAX;AACA,aAAO,IAAP;AACD,KAHD;AAIAP,QAAIS,SAAJ,GAAgB,YAAY;AAC1BN,eAAS,EAAT;AACAO,QAAEC,IAAF,CAAOV,IAAP,EAAa,UAAUW,CAAV,EAAa;AACxB,YAAI,CAACT,OAAOS,EAAEC,EAAT,CAAL,EAAmBV,OAAOS,EAAEC,EAAT,IAAe,EAAf;AACnBH,UAAEC,IAAF,CAAOV,IAAP,EAAa,UAAUa,CAAV,EAAa;AACxB,cAAIC,OAAOL,EAAEN,MAAF,CAASL,IAAT,EAAe,UAAUiB,GAAV,EAAe;AACvC,mBAAOZ,OAAOY,GAAP,EAAYJ,CAAZ,EAAeE,CAAf,CAAP;AACD,WAFU,CAAX;AAGAX,iBAAOS,EAAEC,EAAT,EAAaC,EAAED,EAAf,IAAqBR,SAASU,IAAT,EAAeH,CAAf,EAAkBE,CAAlB,CAArB;AACD,SALD;AAMD,OARD;AASA,aAAOX,MAAP;AACD,KAZD;AAaAH,QAAIiB,MAAJ,GAAa,YAAY;AACvB,aAAOhB,IAAP;AACD,KAFD;AAGAD,QAAIkB,WAAJ,GAAkB,YAAY;AAC5BR,QAAEC,IAAF,CAAOR,MAAP,EAAe,UAAUgB,IAAV,EAAgB;AAC7BC,gBAAQC,GAAR,CAAYF,IAAZ;AACD,OAFD;AAGD,KAJD;AAKAnB,QAAIsB,QAAJ,GAAe,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACpC,UAAI,CAACvB,KAAKsB,KAAL,CAAL,EAAkB;AAChBtB,aAAKsB,KAAL,IAAc,EAAEE,MAAMF,KAAR,EAAeV,IAAIX,GAAnB,EAAwBH,MAAMyB,IAA9B,EAAd;AACD;AACF,KAJD;AAKAxB,QAAI0B,cAAJ,GAAqB,UAAUC,OAAV,EAAmBH,IAAnB,EAAyB;AAC5C,UAAII,SAASlB,EAAEmB,IAAF,CAAOnB,EAAEoB,GAAF,CAAM/B,IAAN,EAAY4B,OAAZ,CAAP,CAAb;AACAjB,QAAEoB,GAAF,CAAMF,MAAN,EAAc,UAAUG,CAAV,EAAa;AACzB,YAAI,CAAC9B,KAAK8B,CAAL,CAAL,EAAc;AACZ9B,eAAK8B,CAAL,IAAU,EAAEN,MAAMM,CAAR,EAAWlB,IAAIX,GAAf,EAAoBH,MAAMyB,IAA1B,EAAV;AACD;AACF,OAJD;AAKA,aAAO,IAAP;AACD,KARD;AASF,WAAOxB,GAAP;AACD;;qBA/CuBF,Q;;;;AAFjBY,O","file":"chordDataMapper.js","sourcesContent":["import _ from 'lodash';\n\nexport default function chordMpr(data) {\n  var mpr = {}, mmap = {}, n = 0, matrix = [], filter, accessor;\n\n  mpr.setFilter = function (fun) {\n    filter = fun;\n    return this;\n  };\n    mpr.setAccessor = function (fun) {\n      accessor = fun;\n      return this;\n    };\n    mpr.getMatrix = function () {\n      matrix = [];\n      _.each(mmap, function (a) {\n        if (!matrix[a.id]) matrix[a.id] = [];\n        _.each(mmap, function (b) {\n          var recs = _.filter(data, function (row) {\n            return filter(row, a, b);\n          });\n          matrix[a.id][b.id] = accessor(recs, a, b);\n        });\n      });\n      return matrix;\n    };\n    mpr.getMap = function () {\n      return mmap;\n    };\n    mpr.printMatrix = function () {\n      _.each(matrix, function (elem) {\n        console.log(elem);\n      });\n    };\n    mpr.addToMap = function (value, info) {\n      if (!mmap[value]) {\n        mmap[value] = { name: value, id: n++, data: info };\n      }\n    };\n    mpr.addValuesToMap = function (varName, info) {\n      var values = _.uniq(_.map(data, varName));\n      _.map(values, function (v) {\n        if (!mmap[v]) {\n          mmap[v] = { name: v, id: n++, data: info };\n        }\n      });\n      return this;\n    };\n  return mpr;\n}\n"]}